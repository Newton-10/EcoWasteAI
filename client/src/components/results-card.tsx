import { useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { 
  CpuIcon, 
  Save, 
  Download, 
  CheckCircle,
  ArrowUpRight,
  CpuIcon as DeviceIcon
} from "lucide-react";
import { format } from "date-fns";
import { DeviceAnalysis } from "@shared/schema";

interface ResultsCardProps {
  analysis: DeviceAnalysis;
}

export default function ResultsCard({ analysis }: ResultsCardProps) {
  const { toast } = useToast();
  
  const formattedDate = analysis.createdAt 
    ? format(new Date(analysis.createdAt), 'MMMM d, yyyy')
    : 'Recently analyzed';
  
  // Determine the lifespan color and width
  const getLifespanStyle = () => {
    // Extract numeric value from the lifespan string if possible
    const match = analysis.remainingLifespan?.match(/(\d+)/);
    const lifespan = match ? parseInt(match[0]) : 0;
    
    // Set width percentage based on lifespan
    let widthPercentage = 30; // Default
    
    if (lifespan > 3) {
      widthPercentage = 80; // Good lifespan (green)
    } else if (lifespan > 1) {
      widthPercentage = 50; // Medium lifespan (yellow)
    } else {
      widthPercentage = 30; // Short lifespan (red)
    }
    
    return { width: `${widthPercentage}%` };
  };

  const downloadReport = () => {
    // Create a formatted report
    const reportContent = `
      # Device Analysis Report
      
      ## Device Information
      - Type: ${analysis.deviceType}
      - Category: ${analysis.deviceCategory}
      - Condition: ${analysis.condition}
      - Analysis Date: ${formattedDate}
      
      ## Components
      ${analysis.components}
      
      ## Recyclable
      ${analysis.recyclable}
      
      ## Lifespan Analysis
      ${analysis.lifespanAnalysis}
      
      ## Estimated Remaining Lifespan
      ${analysis.remainingLifespan}
      
      Generated by EcoSort AI
    `;
    
    // Create a blob and download it
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ecosort-analysis-${analysis.deviceType.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report Downloaded",
      description: "Your analysis report has been downloaded successfully.",
    });
  };

  return (
    <Card className="bg-neutral-850 rounded-xl border border-gray-800 overflow-hidden">
      {/* Results Header */}
      <div className="p-6 border-b border-gray-800">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-primary-700/20 flex items-center justify-center">
              <DeviceIcon className="h-5 w-5 text-primary-400" />
            </div>
            <div>
              <h4 className="text-white font-medium">{analysis.deviceCategory}</h4>
              <p className="text-sm text-gray-400">Analyzed on {formattedDate}</p>
            </div>
          </div>
          <div className="px-3 py-1 bg-primary-900/30 rounded-full">
            <span className={`text-sm font-medium ${
              analysis.condition === 'Good' ? 'text-primary-400' : 
              analysis.condition === 'Fair' ? 'text-yellow-400' : 
              'text-red-400'
            }`}>
              {analysis.condition} Condition
            </span>
          </div>
        </div>
      </div>
      
      {/* Results Content */}
      <div className="p-6">
        <div className="grid grid-cols-2 gap-6 mb-6">
          <div>
            <p className="text-gray-400 text-sm mb-1">Device Type</p>
            <p className="text-white font-medium">{analysis.deviceType}</p>
          </div>
          <div>
            <p className="text-gray-400 text-sm mb-1">Confidence</p>
            <div className="flex items-center gap-2">
              <div className="w-full bg-gray-700 rounded-full h-2.5">
                <div 
                  className="bg-primary-500 h-2.5 rounded-full" 
                  style={{ width: `${analysis.confidence}%` }}
                ></div>
              </div>
              <span className="text-white">{analysis.confidence}%</span>
            </div>
          </div>
          <div>
            <p className="text-gray-400 text-sm mb-1">Components</p>
            <p className="text-white font-medium">{analysis.components}</p>
          </div>
          <div>
            <p className="text-gray-400 text-sm mb-1">Recyclable</p>
            <p className="text-white font-medium">{analysis.recyclable}</p>
          </div>
        </div>
        
        {/* Lifespan Prediction */}
        <div className="bg-neutral-900 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h5 className="text-white font-medium">AI Lifespan Prediction</h5>
            <div className="text-primary-400 flex items-center gap-1">
              <CpuIcon className="h-4 w-4" />
              <span className="text-sm font-medium">GPT-4o</span>
            </div>
          </div>
          <p className="text-gray-300 text-sm leading-relaxed mb-4">
            {analysis.lifespanAnalysis}
          </p>
          <div className="flex items-center">
            <div className="w-full bg-gray-700 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-red-500 via-yellow-500 to-green-500 h-3 rounded-full" 
                style={getLifespanStyle()}
              ></div>
            </div>
            <span className="ml-3 text-white font-medium">{analysis.remainingLifespan}</span>
          </div>
        </div>
        
        {/* Recycling Information */}
        <div>
          <h5 className="text-white font-medium mb-3">Recycling Instructions</h5>
          <ul className="space-y-2 text-gray-300 text-sm">
            <li className="flex items-start gap-2">
              <CheckCircle className="h-4 w-4 text-primary-400 mt-0.5" />
              <span>Remove the battery before recycling</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-4 w-4 text-primary-400 mt-0.5" />
              <span>Bring to certified e-waste collection center</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-4 w-4 text-primary-400 mt-0.5" />
              <span>Consider trade-in programs for partial value recovery</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-4 w-4 text-primary-400 mt-0.5" />
              <span>Ensure data is properly erased before disposal</span>
            </li>
          </ul>
        </div>
      </div>
      
      {/* Results Footer */}
      <div className="border-t border-gray-800 p-4 bg-neutral-900/50 flex justify-between items-center">
        <Button 
          variant="ghost"
          className="text-gray-400 hover:text-white transition-colors flex items-center gap-1 text-sm"
        >
          <Save className="h-4 w-4" />
          <span>Saved to History</span>
        </Button>
        <Button
          variant="ghost"
          className="text-primary-400 hover:text-primary-300 transition-colors flex items-center gap-1 text-sm"
          onClick={downloadReport}
        >
          <Download className="h-4 w-4" />
          <span>Download Report</span>
        </Button>
      </div>
    </Card>
  );
}
